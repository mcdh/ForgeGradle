import java.text.SimpleDateFormat
import java.util.stream.Collectors

plugins {
 id 'groovy'
 id 'net.nemerosa.versioning' version '2.6.1'
 id 'de.undercouch.download' version '3.4.3'
 id 'java-library'
 id 'maven-publish'
}

repositories {
 mavenLocal()
 maven {
  name = "forge"
  url = "http://files.minecraftforge.net/maven"
 }
 maven {
  //Because Srg2Source needs an eclipse dependency.
  name = "eclipse"
  url = "https://repo.eclipse.org/content/groups/eclipse/"
 }
 maven {
  //Because SpecialSource doesnt have a full release
  name = "sonatype"
  url = "https://oss.sonatype.org/content/repositories/snapshots/"
 }
 mavenCentral()
 maven {
  name = "mojang"
  url = "https://libraries.minecraft.net/"
 }
 maven {
  name = 'spring_release_repo'
  url = 'http://repo.spring.io/libs-release/'
 }
}

sourceSets {
 fg {
  groovy.srcDirs = ['src/forgegradle/src/']
  resources.srcDirs = ['src/forgegradle/res/']
 }
}

group = 'net.minecraftforge.gradle'
archivesBaseName = 'ForgeGradle'
targetCompatibility = sourceCompatibility = '1.8'

if (project.hasProperty("push_release")) {
 if (System.env.BUILD_NUMBER == null)
  throw new IllegalArgumentException('Can not push a release without specifying a build number in $BUILD_NUMBER')
 version = "1.2.0.${System.env.BUILD_NUMBER}"
} else {
 version = '1.2-CUSTOM'
}

configurations {
 deployed
 stripped
 fgCompile.extendsFrom(deployed, stripped)
}

dependencies {
 //Gradle API
// stripped gradleApi()
 stripped getGradleDeps('2.6')

 //Groovy SDK
// stripped 'org.codehaus.groovy:groovy-all:2.5.4'
 stripped localGroovy()

 //Moved to the beginning to be the overrider
 stripped 'org.ow2.asm:asm-debug-all:5.0.3'
 stripped 'com.google.guava:guava:18.0'

 //Reading CSVs.. also used by SpecialSource
 stripped 'net.sf.opencsv:opencsv:2.3'
 //For difing and patching
 stripped 'com.cloudbees:diff4j:1.1'
 //Formatting
 stripped 'com.github.abrarsyed.jastyle:jAstyle:1.2'
 stripped 'net.sf.trove4j:trove4j:2.1.0'

 //Replaces the LZMA binary
 stripped 'com.github.jponge:lzma-java:1.3'
 //GDIFF implementation for BinPatches
 stripped 'com.nothome:javaxdelta:2.0.1'
 //Used instead of Argo for building changelog
 stripped 'com.google.code.gson:gson:2.2.4'
 //1.7 Named regexp features
 stripped 'com.github.tony19:named-regexp:0.2.3'
 //Deobf and reobf
 stripped 'net.md-5:SpecialSource:1.7.3'

 //Curse
 stripped 'org.apache.httpcomponents:httpclient:4.3.3'
 stripped 'org.apache.httpcomponents:httpmime:4.3.3'

 //MCP
 stripped 'de.oceanlabs.mcp:RetroGuard:3.6.6'
 stripped 'de.oceanlabs.mcp:mcinjector:3.2-SNAPSHOT'
 stripped 'net.minecraftforge.srg2source:Srg2Source:3.2-SNAPSHOT'

 stripped 'com.github.stephenc.high-scale-lib:high-scale-lib:1.1.4'
 stripped 'org.mcdh:jda:0.0.1'

 //Used in the GradleStart classes
 stripped 'com.mojang:authlib:1.5.16'
 stripped 'net.minecraft:launchwrapper:1.11'

 //Decompiler
 stripped 'org.mcdh:jda:0.0.1'

 //Maven
 deployed "org.apache.maven.wagon:wagon-ssh:2.2"
}

javadoc {
 classpath += configurations.stripped

 //Linked javadoc urls
 options.addStringOption 'link', 'https://gradle.org/docs/current/javadoc/'
 options.addStringOption 'link', 'http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc'
 options.addStringOption 'link', 'http://asm.ow2.org/asm50/javadoc/user/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
 from javadoc
 classifier = 'javadoc'
}

jar {
 from sourceSets.fg.output
 manifest.attributes(
  'Build-Timestamp' : new SimpleDateFormat("yyyy-MM-dd'['HH:mm:ss.SSSZ']'").format(new Date()),
  'Build-Revision' : versioning.info.commit,
  'Build-Jdk' : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
  'Build-OS' : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
  'version': project.version,
  'javaCompliance': project.targetCompatibility,
  'Implementation-Version': "${project.version}-${versioning.info.commit}"
 )
}

publishing {
 publications {
  jda(MavenPublication) {
   from components.java
   pom {
    name = project.name
    description = 'Gradle plugin for Forge'
    url = 'https://github.com/mcdh/ForgeGradle'
    licenses {
     license {
      name = 'GNU/LGPL 2.1 License'
      url = 'https://github.com/mcdh/ForgeGradle/blob/master/LICENSE'
     }
    }
    developers {
     developer {
      id = 'Matthewacon'
      name = 'Matthew Barichello'
     }
     developer {
      id = 'AbrarSyed'
      name = 'Abrar Syed'
     }
     developer {
      id = 'LexManos'
      name = 'Lex Manos'
     }
    }
    scm {
     url = 'https://github.com/mcdh/ForgeGradle'
     connection = 'scm:git:git://github.com/mcdh/ForgeGradle.git'
     developerConnection = 'scm:git:git@github.com:mcdh/ForgeGradle.git'
    }
   }
  }
 }

 repositories {
  maven {
   name = 'local'
   url = "file://${System.properties['user.home']}/.m2/"
  }
  if (project.hasProperty("forgeMavenPass")) {
   maven {
    url = "https://files.minecraftforge.net/maven/manage/upload"
    credentials(PasswordCredentials) {
     username = "forge"
     password = project.getProperty('forgeMavenPass')
    }
   }
  }
 }
}

FileCollection getGradleDeps(final String gradleApiVersion) {
 final String buildDirPath = project.buildDir.getAbsolutePath()
 final String downloadLocation = "${buildDirPath}/gradle-${gradleApiVersion}-bin.zip"
 final String extractedLocation = "${buildDirPath}/gradle_extracted/"
 boolean newVersionDownloaded = false
 if (!project.file(downloadLocation).exists() && !project.file('libs/').exists()) {
  newVersionDownloaded = true
  download {
   src "https://services.gradle.org/distributions/gradle-${gradleApiVersion}-bin.zip"
   dest downloadLocation
   overwrite false
  }
  if (project.file(extractedLocation).exists()) {
   project.delete(extractedLocation)
  }
  copy {
   from zipTree(downloadLocation)
   into extractedLocation
  }
 }
 final File libs = project.file('libs/')
 if (newVersionDownloaded && libs.exists()) {
  project.delete(libs)
 }
 if (newVersionDownloaded) {
  libs.mkdirs()
  copy {
   from "${extractedLocation}/gradle-2.6/lib/"
   into 'libs/'
  }
 }
 Set<File> deps = new HashSet<>()
 deps.addAll(project.fileTree('libs/').files)
 boolean filesAdded = true
 while(filesAdded) {
  filesAdded = false
  Set<File> toRemove = new HashSet<>()
  Set<File> toAdd = new HashSet<>()
  deps.forEach {
   if (it.isDirectory()) {
    filesAdded = true
    toRemove.add(it)
    toAdd.addAll(project.fileTree(it).files)
   }
  }
  deps.removeAll(toRemove)
  deps.addAll(toAdd)
 }
 deps = deps.parallelStream().filter { it.getName().endsWith(".jar") }.collect(Collectors.toList())
 return project.files(deps)
}

build.dependsOn('publishToMavenLocal')